// * -------------------------------------------------------------------------
// * [스타일 가이드]
//
// * - 코드의 `재사용성`을 높이자
// * - 쉽게 `유지보수` 하자
// * - `확장` 가능하게 하자
// * - `클래스명 만으로도 무슨 의미인지 예측` 가능하도록 하자
// * -------------------------------------------------------------------------
//
// * SMACSS(Scalable and Modular Architecture for CSS, https://smacss.com/)
//
// 		CSS "확장형 모듈식 구조"(by Jonathan Snook)
// 		CSS 프레임워크가 아닌, 하나의 스타일 가이드
//
// 		[!사용 시, 주의사항!]
// 			- ID 선택자 사용금지
// 			- 파생된 CSS 선택자 사용금지
// 			- !important 사용 금지
// 			- Class 이름은 의미있게, 다른 이가 이해할 수 있도록 선언
//
// * -- [Base] ---------------------------------------------------------------
//
// 		기본 스타일(Reset, Default, Variables, Mixins)
//
// 		기본 스타일에는 !important를 사용할 이유가 없다.
//
//
// * -- [Layout] -------------------------------------------------------------
//
// 		레이아웃과 관련된 스타일 정의
//
// 		Class명에 접두사(prefix) "l-" 를 붙인다.
//
//
// * -- [Module(Components)] -------------------------------------------------
//
// 		모듈 관련 스타일
//
// 		스타일 재 사용을 위한 요소
// 		Block, Element, Module
// 		재사용을 위해 id 선택자와 element를 사용하지 않는다.
// 		만약, element 선택자를 사용해야 한다면, .box > span 처럼 child 선택자를 사용
// 		예시) .nav-bar, .image-slider, .dialogs, .widgets, .tables, .icons, ..
//
//
// * -- [State] --------------------------------------------------------------
//
// 		상태를 나타내는 스타일
//
// 		hidden, expend, active, hover 등의 상태에서 사용
// 		Class명에 suffix “is-” 또는 “s-”를 붙여서 사용
//
//
// * -- [Theme] --------------------------------------------------------------
//
// 		사이트 전반적 look & feel 제어
//
// 		색상이나 이미지 등을 변하지 않는 스타일과 분리, 기존 스타일을 재 선언하여 사용할 수 있다.
// 		적용범위가 넓은 테마는 “theme-”를 suffix를 붙여 사용한다.
//
// * -- [Chaining State]
// * -------------------------------------------------------------------------
//
// [믹스인 vs 익스텐드]
// https://tech.bellycard.com/blog/sass-mixins-vs-extends-the-data/
//
// 중복코드가 나쁜 주된 이유는 유지보수가 힘들기 때문인데, mixin의 경우 사람이 만지는 단계에서는
// 중복이 발생하지 않으므로 유지보수의 문제가 발생하지 않습니다. 또한 중복이 발생하더라도 그것이
// 기계가 해석하기 더 쉬운 형태라면 성능이 좋아질 것입니다. 따라서 단순히 컴파일 후 중복이 더
// 많이 발생한다고 해서 나쁘다고 평가하기는 어렵습니다.
//
// Winner!! {{ Mixins }}
//
// * -------------------------------------------------------------------------